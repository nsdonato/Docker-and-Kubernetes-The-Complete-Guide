
# Section 1: Dive Into Docker!
    
    1. Finished Code and Diagrams

        Finished Code and Diagrams
            Finished Code

            Finished code is attached to each applicable lecture throughout the course. If you get stuck at any point you can download the code and compare it against yours with a diff tool like Diffchecker or VSCode's built-in comparison tool.

        Diagrams

            The diagrams shown in the course are attached to this lecture note as a zip file.

            Download the file and extract it somewhere on your computer.

            Visit diagrams.net (formerly draw.io).

            Select Open Existing Diagram and use the file explorer to select the diagram file from your computer.

            or

            Click on File from the diagrams.net menu.

            Select Open From Device and use the file explorer to select the diagram file from your computer.

            Note - Please understand, if a diagram or group of diagrams is missing, this means that we no longer have them to share. You'll need to use a good screenshot tool to make a copy from the video lecture.

        Resources for this lecture
            diagrams.zip

    2. Join Our Community!
        nop

    3. Why Use Docker?
        -.Porque podes instalar y correr software en cualquier compu sin preocuparte por el setup o las dependencias.-

        Porque cada vez que tenes que instalar algo siempre te encontras con un problema y tenes que andar buscando que es porque y como solucionarlo.

        Empieza a explicar el porqué usar docker, por ejemplo trata de instalar Redis (sirve para almacenar data en memoria.) en su compu y le da un error, entonces tira 
            docker run-it redis 
        y funca en docker...

    4. What is Docker?
        Docker es una plataforma o ecosistema que crea y corre containers

        Docker ecosystem:
            Docker Cliente
            Docker Server
            Docker Machine
            Docker Images
            Docker Hub
            Docker Compose

        Cuando tiro el comando Docler run-it redis, lo que pasó fue:
        Algo llamo al Docker CLI, llamo al Docker Hub, se bajo el archivo de la imagen, que contiene todas las dependencias y configuraciones para correr Redis, con la imagen corrió un container (es una instancia de una imagen que corre como un programa)

        Container basicamente es un programa con sus propios recuros, memoria, netfworking, etc.

    5. Docker for Mac/Windows
        Vamos a instalar Docker para Windows:

        https://hub.docker.com/editions/community/docker-ce-desktop-windows

        Docker Cliente (CLI), herramientas que vamos a usar para tirar comandos y nos ayuda a interactuar con Docker Server "Docker Daemon")

        Docker Server/Daemon:
            Herramienta que es responsable por crear imagenes, correr containers, etc.

    6. Installing Docker on MacOS
        ...
    7. Installing Docker for Windows Home users
        ...
    8. Installing Docker for Windows Profressional

        Docker.com -> GetStarted > Download for Windows > Login with Docker account (vamos a necesitarlo para varias cosas, hacerlo) > Get Docker > no tildar windows containers > hasta que termine.

        Logout and log back in
    9. More Windows Professional Setup
        
        Tenes que reiniciar cuando queres abrir docker y te quiere habilitar hyper-v

    10. One Last Piece of Windows Professional Setup

        En la barra de herramientas aparece la ballena, hay que loguearse.

        En una terminal tirar el comand: 
        > Docker version 

        para ver que se haya instalado bien.

    11. Installing Docker on Linux
        ...

    12. Using the Docker Client
        Tuve que deshabilitar el proxy del laburo de docker 

        > docker run hello-world

        esto corre un nuevo container, con la imagen hello-world, tiene un programa adentro, que imprime solamente eso que vemos en pantalla:
        Hello from Docker! ...etc

        Paso a paso:
            docker run hello-world -> Mi compu -> Docker Cli => Docker Server:
            1. se fija si en tu compu hay una imagen en cache de esa imagen
            2. si no había en cache -> Docker Hub -> hello-world -> la guarda en la cache de tu compu.

            Después de eso, la usa, crea una instancia de esa imagen (container) y lo corre.

    13. But Really...What's a Container?
        Para entender que es un container, necesitas tener un poco de brackground en como funciona tu sistema operativo:

        tienen un kernel que corre un proceso de software que gobierna entre todos los programas que están corriendo y todo el hardware que esta conectado.

        por ejemplo: node js, le dice al kernel que quiere que leer un archivo, a traves de una de las System Calls, son como endpoints que expone
        kernel y llama al disco rigido y le devuelve lo que necesita.

        Caso hipotetico:
        chrome usa python v2 y node js python v3 y no podes tener instalado en tu pc las dos versiones salvo que:
        
        Podríamos crear un segmento en el disco rigido para cada version de python y en cada llamada de chrome o node js por las system calls, el kernel pregunta que proceso es (chrome.exe x ej) y lo deriva al segmento correspondiente.

        Este proceso de segmentar se llama NAMESCPACING, aisla recuros para un proceso o grupo de procesos 
        procesos, hard drive, network, users, hostnames, inter process communications...

        CONTROL GROUPS, limita el monto de recursos usados por cada proceso:
        memoria, cpu usage, hd i/o, network bandwith

        Cada vez que hablamos de una IMAGEN hablamos de:
        fyle system snapshot:
             basicamente es como un copy paste de directorios, archivos especificos, o sea, podemos tener una imagen que tenga solo chrome y pyhon,el kernel va a aislar ram, network, cou y disco rigido donde va a poner los procesos de chrome y python.
        
        startup command:
            por ej "run chrome" y chrome pasa a ser un proceso corriendo en el container.

    14. How's Docker Running on Your Computer?
        namespacing y control groups son especificos de linux, no de windows, no de mac. ¿como funciona entonces en esos sistemas oeprativos?

        Cuando instalas docker, se instala linux virtual machine, dentro de esta maquina virtual, que tiene su kernel y hostea los procesos y accesos a los recursos de tu maquina.
        
# Section 2: Manipulating Containers with the Docker Client
<
    15. Docker Run in Detail
        docker run nombre_imagen
            hace referencia al docker Cli
                crea y corre la imagen
                    nombre de la imagen

    16. Overriding Default Commands
        > docker run nombre_imagen (default command override, para que se ejecute apenas se corre.)

        > docker run busybox echo hi there
        hi here

        > docker run busybox ls (imprime los archivos y carpetas dentro del container)
        bin, dev, etc, home, proc, root, sys, tmp, usr, var 

        a ls, lo corre como un proceso
        los comandos extras son comandos que existen en la imagen creada, no se pueden correr en cualquier container si no sabes que están ahí

    17. Listing Running Containers
        docker ps // lista todos los containers corriendo, sirve para obtener datos del mismo, como el id.

        > docker run busybox ping google.com (va a mostrar el container de busybox, solo así porque sino se ejecuta y se stopea.)
        En una segunda terminal:
        > docker ps 
        
        > docker ps --all // lista todos los containers que creamos alguna vez.
        
    18. Container Lifecycle
         docker run = docker create + docker start

        > docker create image_name (nombre de la imagen para usar por este container que creamos)
        saskldj980423lkj23   // te retorna el container_id, ej si tarabamos hello-world
        > docker start -a saskldj980423lkj23 // corre el container con ese id. (-a sirve para ver la info con la que arranca, sin -a, retorna el id como el create)

    19. Restarting Stopped Containers
        Una vez que creamos un container con un comando determinado, no lo podemos reemplazar.

    20. Removing Stopped Containers
        > docker system prune // stopea todos los containers, la cache de las imagenes, red

        te sirve mas que nada para eliminar todo, si no pensas usar mas docker

    21. Retrieving Log Outputs
        
        > docker logs container_id // obtengo los logs

    22. Stopping Containers
        > docker create busybox ping google.com
        container_id
        
        > docker start container_id
        container_id
        
        > docker logs container_id
        muestra los pings...
        
        > docker ps
        esta corriendo..

        stop > SIGTERM -> termina el proceso de ping y hace unas limpiezas extras
        stopkill > SIGKILL -> termina el proceso de ping, YA.-

        > docker stop container_id // si no se stopea en 10s docker corre el comando kil

        > docker kill container_id

    23. Multi-Command Containers
        
        > redis-server (instaló redis sin docker)
        muestra info de redis
        > redis-cli // se conecta al server de redis local a la espera de un comando
        >
        > set mynumber 5
        OK
        > get mynumber
        "5"

        > docker run redis

        redis esta corriendo en el container, por ende si tiras en otra venta redis-cli, va a decir que no puede hacer nada.

    24. Executing Commands in Running Containers
        ¿Como hacemos para ejecutar un segundo comando?

        > docker exec -it container_id command
        Referencia al Docker CLI
            Corre otro comando
                nos habilita a escribir input en el container
                    id del contedor
                        commando a ejecutar.
        
        > docker exec -it container_id redis-cli
        > //entra al server
        > set mynumber 5
        OK
        > get mynumber
        "5"

        * si removemos el -it, no podemos escribir sobre el comando, entonces nos devuelve la misma terminal

        > docker exec container_id redis-cli
        > // no entra, no permite comandos

    25. The Purpose of the IT Flag
        como estamos corriendo la virtual machine, los procesos tienen 3 canales atachados a ellos:
        STDIN
        STDOUT
        STDERR

        se usan para comunicar adentro del proceso (STDIN) o fuera (lo que viene del proceso) (STDOUT), STDERR, muestra los errores del proceso a traves de este canal.

        -it son dos flags unidos, -i (cuando ejecutamos este nuevo comando en el contenedor, queremos atachar nuestra terminal a STDIN, para que el container pueda recibir lo que escribimos) y -t (es para que lo que escribimos se retorne desde el container, formateado "lindo")

        por ejemplo, si tiramos docker exec -i container_id redis-cli, no nos retorna la terminal, onda > escribi algo, sino así:
        > docker exec -i container_id redis-cli

        y no te das cuenta que podes escribir, en cambio con -t
        > docker exec -i container_id redis-cli
        >

        // al menos te muestra el > y te da la pauta que podes escribir y esta dentro del cli de redis.

    26. Getting a Command Prompt in a Container

        Para eso debemos, abrir 2 ventas, en una corres el container y en la otra haces docker exec -it container_id sh
        > docker exec -it container_id sh
        # cd ~/
        # ls
        # cd /
        # ls 
        bin data etc lib media opt root sbin sys user ETC..
        # echo hi there
        hi there
        # exit // o ctrl+d para salir

        sh es el nombre de un programa que esta en el container, nos habilita a entrar y ejecutar comandos en el container.

        bash, powershell zsh sh -> command processors

    27. Starting with a Shell
    
        > docker run -it busybox sh // empeza una nueva imagen en un nuevo container y ejecuta el comando sh

    28. Container Isolation

        muestra en dos terminales diferentes, containers diferentes pero de la misma imagen, crea un archivo en uno, y revisa en el otro, al ser instancias diferentes, no lo ve.

# Section 3: Building Custom Images Through Docker Server

    29. Creating Docker Images 23:10
        
        Vamos a crear nuestras propias imagenes con un docker file.

        es un archivo de texto plano que va a tener un par de lineas de configuración, como se va a comportar cuando arranque, que programas va a tener, etc..

        este archivo se pasa al docker cli > que se lo pasa al docker server > agarra al docker file, y buildea una imagen que podes usar después.

        crear un docker file.
            especificar la imagen base
            correr algunos comandos para instalar programas adicionales
            especificar un comando para correr cuando arranque nuestro container.

    30. Buildkit for Docker Desktop v2.4.0+ and Edge
        2-22-2021

        Most students who have the most recent versions of Docker will now have "Buildkit" enabled by default. If so, you will notice a slightly different output in your terminal when building from a Dockerfile.

        The main difference for students will be the final step in the build process. As shown in the lecture the last step would say:

        ---> fc60771eaa08
        Successfully Built fc60771eaa08
        
        Now, with Buildkit, the final step would say:

        => => exporting layers                                                      
        0.0s => => writing image sha256:ee59c34ada9890ca09145cc88ccb25d32b677fc3b61e921  0.0s
        
        Both fc60771eaa08 and ee59c34ada9890ca09145cc88ccb25d32b677fc3b61e921 are the resulting image ID's that you would use to run a container.

        eg:

        docker run fc60771eaa08
        or

        docker run ee59c34ada9890ca09145cc88ccb25d32b677fc3b61e921


        Disabling Buildkit to match course output

        If you wish to disable the Buildkit feature so that you can more accurately follow along with the course, do the following:

        Click the Docker Icon your systray

        Select "Preferences"

        Select "Docker Engine"

        Change buildkit from true to false

        {
        "features": {
            "buildkit": false
        },
        "experimental": false
        }
        Apply and Restart.

        Buildkit Features and Documentation

        If you want to learn more about features Buildkit has to offer, please check out the following pages:

        https://docs.docker.com/develop/develop-images/build_enhancements/

        https://docs.docker.com/engine/reference/commandline/build/#specifying-external-cache-sources

        https://www.docker.com/blog/advanced-dockerfiles-faster-builds-and-smaller-images-using-buildkit-and-multistage-builds/

    31. Building a Dockerfile
        
        Vamos a crear una imagen que va a correr redis-server

        mkdir redis-image
        cd redis-image 
        code .

        Creamos el archivo Dockerfile, y fuimos poniendo comentarios (ver archivo)
        Una vez que terminamos para buildear la imagen usamos
        > docker build . // con el punto final.

    32. Dockerfile Teardown
        1) la instrucción que le va a decir a Docker Server qué hacer.
        2) argumentos para la instrucción.

        FOM alpine
        RUN apk add --update redis
        CMD ["redis-server"]

    33. What's a Base Image?
        Escribir un dockerfile == a decirle a tu computadora sin sistema operativo que instale Chrome.

        o sea, para instalarlo, deberías, instalar un SO, usar el explorador default, bajarte chrome y ejecutarlo.

        nosotros arrancamos con la imagen instalando alpine, agregando redis y después corriendolo.

        el usa alpine porque tiene preinstalado un grupo de programas que son utiles.
        
    34. The Build Process in Detail
        
        docker build .
        agarra el docker file y genera la imagen
        . es el grupo de archivos y carpetas que encapsulamos en el container.

        explica lo que pasa detras de escena cuando hacemos 
        docker build .

        FROM alpine 
            se descarga la imagen de alpine
        RUN apk add --update redis
            mira el paso anterior y crea un container con alpine y genera un proceso de apk para instalar la app
            después lo stopea y genera una imagen temporal con ese snaptshot, de con alpine con la app borra el container 
        CMD ["redis-server"]
            Mira el paso anterior, crea la imagen y le dice que si en algun momento va a correr como contenedor, el comando va a ser ese.

    35. A Brief Recap
        ...

    36. Rebuilds with Cache
        
        agregamos info al dockerfile, volvemos a correr docker build .

        en el output del build, vemos que usa la imagen en cache y no vuelve a bajar lo que ya bajó

        si cambiamos el orden de los RUN, va a rebuildear todo e instalarlo en orden. esto también puede afectar en cuanto a tiempo de instalacion de todo.

    37. Tagging an Image
        
        esto sirve para no tener que andar usando el id para darle run, es como un alias.

        mi docker id / redis : latest
            repo/proyect name
                version

        -t es tag para la imagen.

        > docker build -t midockerid/redis:latest .

        después tenes que hacer
        > docker run midockerid/redis 
            por default es latest, por eso no se pone.

    38. Quick Note for Windows Users
        In the upcoming lecture, we will be running a command to create a new image using docker commit with this command:

        docker commit -c 'CMD ["redis-server"]' CONTAINERID

        If you are a Windows user you may get an error like "/bin/sh: [redis-server]: not found" or "No Such Container"

        Instead, try running the command like this:

        docker commit -c "CMD 'redis-server'" CONTAINERID

    39. Manual Image Generation with Docker Commit
        vamos a crear un nuevo container e instalar redis y setear un comando default.

        docker run -it alpine sh 
        # apk add --update redis
        se instala en el file system, abrimos otra terminal, para tomar un snapshot de ese contenedor corriendo
        > docker ps // para obtener el id
        container_id
        > docker commit -c 'CMD ["redis-server"]' container_id

        -c 
            es el comando default

        > docker run nuevo_container_id

        
#  Section 19: Extras

    333. Bonus!
        los otros cursos que tiene.